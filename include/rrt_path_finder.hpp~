typedef struct _Vertex
{
  double data[2];
  struct _Vertex * parent;
  double dist;
  unsigned int index;
}Vertex;


int is_goal_reachable(const std::vector<Vertex*>& lv, const cv::Mat& im);
double dist2(const Vertex& v1, const Vertex& v2);
double no_wall_between(const Vertex& v1, const Vertex& v2, const cv::Mat& im);
Vertex* nearest_vertex(const Vertex& qrand, const std::vector<Vertex*>& lv);
void rand_free_conf(Vertex& qrand, int height, int width);
Vertex* new_conf(const Vertex& qrand, Vertex& qnear, double *dq, const cv::Mat& im);
cv::Point2f vertex_to_point2f(const Vertex& v);
std::string type2str(int type);
